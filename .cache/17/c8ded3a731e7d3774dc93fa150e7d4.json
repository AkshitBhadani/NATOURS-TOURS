{"id":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","dependencies":[{"name":"E:\\node.js\\main\\try\\package.json","includedInParent":true,"mtime":1710149521390},{"name":"E:\\node.js\\main\\try\\node_modules\\stripe\\cjs\\package.json","includedInParent":true,"mtime":1709787237686},{"name":"./HttpClient.js","loc":{"line":4,"column":32,"index":177},"parent":"E:\\node.js\\main\\try\\node_modules\\stripe\\cjs\\net\\FetchHttpClient.js","resolved":"E:\\node.js\\main\\try\\node_modules\\stripe\\cjs\\net\\HttpClient.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchHttpClientResponse = exports.FetchHttpClient = void 0;\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient_js_1.HttpClient {\n    constructor(fetchFn) {\n        super();\n        // Default to global fetch if available\n        if (!fetchFn) {\n            if (!globalThis.fetch) {\n                throw new Error('fetch() function not provided and is not defined in the global scope. ' +\n                    'You must provide a fetch implementation.');\n            }\n            fetchFn = globalThis.fetch;\n        }\n        // Both timeout behaviors differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of the request.\n        if (globalThis.AbortController) {\n            // Utilise native AbortController if available\n            // AbortController was added in Node v15.0.0, v14.17.0\n            this._fetchFn = FetchHttpClient.makeFetchWithAbortTimeout(fetchFn);\n        }\n        else {\n            // Fall back to racing against a timeout promise if not available in the runtime\n            // This does not actually cancel the underlying fetch operation or resources\n            this._fetchFn = FetchHttpClient.makeFetchWithRaceTimeout(fetchFn);\n        }\n    }\n    static makeFetchWithRaceTimeout(fetchFn) {\n        return (url, init, timeout) => {\n            let pendingTimeoutId;\n            const timeoutPromise = new Promise((_, reject) => {\n                pendingTimeoutId = setTimeout(() => {\n                    pendingTimeoutId = null;\n                    reject(HttpClient_js_1.HttpClient.makeTimeoutError());\n                }, timeout);\n            });\n            const fetchPromise = fetchFn(url, init);\n            return Promise.race([fetchPromise, timeoutPromise]).finally(() => {\n                if (pendingTimeoutId) {\n                    clearTimeout(pendingTimeoutId);\n                }\n            });\n        };\n    }\n    static makeFetchWithAbortTimeout(fetchFn) {\n        return async (url, init, timeout) => {\n            // Use AbortController because AbortSignal.timeout() was added later in Node v17.3.0, v16.14.0\n            const abort = new AbortController();\n            let timeoutId = setTimeout(() => {\n                timeoutId = null;\n                abort.abort(HttpClient_js_1.HttpClient.makeTimeoutError());\n            }, timeout);\n            try {\n                return await fetchFn(url, Object.assign(Object.assign({}, init), { signal: abort.signal }));\n            }\n            catch (err) {\n                // Some implementations, like node-fetch, do not respect the reason passed to AbortController.abort()\n                // and instead it always throws an AbortError\n                // We catch this case to normalise all timeout errors\n                if (err.name === 'AbortError') {\n                    throw HttpClient_js_1.HttpClient.makeTimeoutError();\n                }\n                else {\n                    throw err;\n                }\n            }\n            finally {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n            }\n        };\n    }\n    /** @override. */\n    getClientName() {\n        return 'fetch';\n    }\n    async makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const res = await this._fetchFn(url.toString(), {\n            method,\n            // @ts-ignore\n            headers,\n            // @ts-ignore\n            body,\n        }, timeout);\n        return new FetchHttpClientResponse(res);\n    }\n}\nexports.FetchHttpClient = FetchHttpClient;\nclass FetchHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n    constructor(res) {\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers) {\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n}\nexports.FetchHttpClientResponse = FetchHttpClientResponse;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}}],"sources":{"../../node_modules/stripe/cjs/net/FetchHttpClient.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchHttpClientResponse = exports.FetchHttpClient = void 0;\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient_js_1.HttpClient {\n    constructor(fetchFn) {\n        super();\n        // Default to global fetch if available\n        if (!fetchFn) {\n            if (!globalThis.fetch) {\n                throw new Error('fetch() function not provided and is not defined in the global scope. ' +\n                    'You must provide a fetch implementation.');\n            }\n            fetchFn = globalThis.fetch;\n        }\n        // Both timeout behaviors differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of the request.\n        if (globalThis.AbortController) {\n            // Utilise native AbortController if available\n            // AbortController was added in Node v15.0.0, v14.17.0\n            this._fetchFn = FetchHttpClient.makeFetchWithAbortTimeout(fetchFn);\n        }\n        else {\n            // Fall back to racing against a timeout promise if not available in the runtime\n            // This does not actually cancel the underlying fetch operation or resources\n            this._fetchFn = FetchHttpClient.makeFetchWithRaceTimeout(fetchFn);\n        }\n    }\n    static makeFetchWithRaceTimeout(fetchFn) {\n        return (url, init, timeout) => {\n            let pendingTimeoutId;\n            const timeoutPromise = new Promise((_, reject) => {\n                pendingTimeoutId = setTimeout(() => {\n                    pendingTimeoutId = null;\n                    reject(HttpClient_js_1.HttpClient.makeTimeoutError());\n                }, timeout);\n            });\n            const fetchPromise = fetchFn(url, init);\n            return Promise.race([fetchPromise, timeoutPromise]).finally(() => {\n                if (pendingTimeoutId) {\n                    clearTimeout(pendingTimeoutId);\n                }\n            });\n        };\n    }\n    static makeFetchWithAbortTimeout(fetchFn) {\n        return async (url, init, timeout) => {\n            // Use AbortController because AbortSignal.timeout() was added later in Node v17.3.0, v16.14.0\n            const abort = new AbortController();\n            let timeoutId = setTimeout(() => {\n                timeoutId = null;\n                abort.abort(HttpClient_js_1.HttpClient.makeTimeoutError());\n            }, timeout);\n            try {\n                return await fetchFn(url, Object.assign(Object.assign({}, init), { signal: abort.signal }));\n            }\n            catch (err) {\n                // Some implementations, like node-fetch, do not respect the reason passed to AbortController.abort()\n                // and instead it always throws an AbortError\n                // We catch this case to normalise all timeout errors\n                if (err.name === 'AbortError') {\n                    throw HttpClient_js_1.HttpClient.makeTimeoutError();\n                }\n                else {\n                    throw err;\n                }\n            }\n            finally {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n            }\n        };\n    }\n    /** @override. */\n    getClientName() {\n        return 'fetch';\n    }\n    async makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const res = await this._fetchFn(url.toString(), {\n            method,\n            // @ts-ignore\n            headers,\n            // @ts-ignore\n            body,\n        }, timeout);\n        return new FetchHttpClientResponse(res);\n    }\n}\nexports.FetchHttpClient = FetchHttpClient;\nclass FetchHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n    constructor(res) {\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers) {\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n}\nexports.FetchHttpClientResponse = FetchHttpClientResponse;\n"},"lineCount":144}},"error":null,"hash":"43a3b6ba21f24fb48e635541399184ee","cacheData":{"env":{}}}